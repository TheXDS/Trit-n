namespace TheXDS.Triton.Services;

/// <summary>
/// A base class for simple implementation of services. Allows setting or
/// discovering the transaction configuration to use.
/// </summary>
/// <param name="transactionConfiguration">
/// The configuration to use for transactions generated by this service.
/// </param>
/// <param name="factory">The factory of transactions to use.</param>
public class TritonService(IMiddlewareConfigurator transactionConfiguration, ITransactionFactory factory) : ITritonService
{
    /// <summary>
    /// Initializes a new instance of the class <see cref="TritonService"/>,
    /// automatically searching for the transaction configuration to use.
    /// </summary>
    /// <param name="factory">The factory of transactions to use.</param>
    public TritonService(ITransactionFactory factory) : this(new TransactionConfiguration(), factory)
    {
    }

    /// <summary>
    /// Gets the default configuration used when creating transactions.
    /// </summary>
    public IMiddlewareConfigurator Configuration { get; } = transactionConfiguration ?? throw new ArgumentNullException(nameof(transactionConfiguration));

    /// <summary>
    /// Gets a reference to the transaction factory used by the service.
    /// </summary>
    public ITransactionFactory Factory { get; } = factory ?? throw new ArgumentNullException(nameof(factory));

    /// <summary>
    /// Gets a transaction that allows reading information from the database.
    /// </summary>
    /// <returns>
    /// A transaction that allows reading information from the database.
    /// </returns>
    public ICrudReadTransaction GetReadTransaction() => Factory.GetReadTransaction(Configuration.GetRunner());

    /// <summary>
    /// Gets a transaction that allows writing information to the database.
    /// </summary>
    /// <returns>
    /// A transaction that allows writing information to the database.
    /// </returns>
    public ICrudWriteTransaction GetWriteTransaction() => Factory.GetWriteTransaction(Configuration.GetRunner());

    /// <summary>
    /// Gets a transaction that allows reading and writing information in the
    /// database.
    /// </summary>
    /// <returns>
    /// A transaction that allows reading and writing information in the database.
    /// </returns>
    public ICrudReadWriteTransaction GetTransaction() => Factory.GetTransaction(Configuration.GetRunner());
}
